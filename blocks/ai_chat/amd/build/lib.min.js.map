{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["var questionString = 'Can I help u...'\r\nvar errorString = 'An error occurred! Please try again later.'\r\nimport * as Modal from 'core/modal_factory';\r\nimport * as ModalEvents from 'core/modal_events';\r\nexport const init = (data) => {\r\n    const blockId = data['blockId']\r\n    const history = data['history']\r\n    console.log(\"hehehehe\")\r\n    for (let message of history) {\r\n        console.log(\"His: \", message)\r\n        addToChatLog(message.role === 1 ? 'user' : 'bot', message.content,1 )\r\n    }\r\n\r\n    // Prevent sidebar from closing when osk pops up (hack for MDL-77957)\r\n    window.addEventListener('resize', event => {\r\n        event.stopImmediatePropagation();\r\n    }, true);\r\n\r\n    document.querySelector('#ai_input').addEventListener('keyup', e => {\r\n        if (e.which === 13 && e.target.value !== \"\") {\r\n            addToChatLog('user', e.target.value, 0)\r\n            createCompletion(e.target.value, blockId)\r\n            e.target.value = ''\r\n        }\r\n    })\r\n    document.querySelector('.block_ai_chat #go').addEventListener('click', e => {\r\n        const input = document.querySelector('#ai_input')\r\n        if (input.value !== \"\") {\r\n            addToChatLog('user', input.value, 0)\r\n            createCompletion(input.value, blockId)\r\n            input.value = ''\r\n        }\r\n    })\r\n\r\n    document.querySelector('.block_ai_chat #refresh').addEventListener('click', e => {\r\n        e.preventDefault();\r\n        Modal.create({\r\n        type: Modal.types.SAVE_CANCEL,\r\n        title: 'Confirmation before refresh',\r\n        body: '<p>Are you sure before you choose to refresh this chat?</p>',\r\n        }).then(modal=>{\r\n            modal.show();\r\n            modal.getRoot().on(ModalEvents.save, () => {\r\n                console.log(\"Click save\")\r\n                clearHistory(blockId);\r\n                console.log(\"save successful!\")\r\n                modal.hide();\r\n            });\r\n            modal.getRoot().on(ModalEvents.hidden, function() {\r\n                modal.destroy();\r\n            });\r\n        }).catch(Notification.exception);\r\n    })\r\n\r\n    require(['core/str'], function(str) {\r\n        var strings = [\r\n            {\r\n                key: 'askaquestion',\r\n                component: 'block_ai_chat'\r\n            },\r\n            {\r\n                key: 'erroroccurred',\r\n                component: 'block_ai_chat'\r\n            },\r\n        ];\r\n        str.get_strings(strings).then((results) => {\r\n            questionString = results[0];\r\n            errorString = results[1];\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Add a message to the chat UI\r\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\r\n * @param {string} message The text of the message to add\r\n */\r\nconst addToChatLog = (type, message, his) => {\r\n    console.log(\"Message begin addtochatlog\", message)\r\n    let messageContainer = document.querySelector('#ai_chat_log')\r\n    const messageElem = document.createElement('div')\r\n    messageElem.classList.add('ai_message')\r\n    for (let className of type.split(' ')) {\r\n        messageElem.classList.add(className)\r\n    }\r\n\r\n    const messageText = document.createElement('span')\r\n    if (his){\r\n        messageText.innerText = message\r\n    }\r\n    else {\r\n        messageText.innerHTML = message\r\n    }\r\n\r\n    messageElem.append(messageText)\r\n    console.log(messageText)\r\n\r\n    messageContainer.append(messageElem)\r\n    if (messageText.offsetWidth) {\r\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\r\n    }\r\n    messageContainer.scrollTop = messageContainer.scrollHeight\r\n}\r\n\r\nconst clearHistory = (blockId) => {\r\n\r\n    fetch(`${M.cfg.wwwroot}/blocks/ai_chat/api/completion.php?block_id=${blockId}`, {\r\n        method: 'DELETE',       \r\n    })\r\n    .then(response => {\r\n\r\n        try{\r\n            if (!response.ok) {\r\n                throw Error(response.statusText)\r\n            } else {\r\n                document.querySelector('#ai_chat_log').innerHTML = \"\"\r\n                return\r\n            }\r\n        } catch{\r\n            console.log(error)\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.log(error)\r\n        document.querySelector('#ai_input').classList.add('error')\r\n        document.querySelector('#ai_input').placeholder = errorString\r\n    })\r\n}\r\n\r\n/**\r\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\r\n * @param {string} message The text to get a completion for\r\n * @param {int} blockId The ID of the block this message is being sent from -- used to override settings if necessary\r\n * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\r\n */\r\nconst createCompletion = (message, blockId) => {\r\n    \r\n    document.querySelector('.block_ai_chat #control_bar').classList.add('disabled')\r\n    document.querySelector('#ai_input').classList.remove('error')\r\n    document.querySelector('#ai_input').placeholder = questionString\r\n    document.querySelector('#ai_input').blur()\r\n    addToChatLog('bot loading', '...', 0);\r\n    fetch(`${M.cfg.wwwroot}/blocks/ai_chat/api/completion.php`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            message: message,\r\n            blockId: blockId,\r\n        })\r\n    })\r\n    .then(response => {\r\n        let messageContainer = document.querySelector('#ai_chat_log')\r\n        messageContainer.removeChild(messageContainer.lastElementChild)\r\n        document.querySelector('.block_ai_chat #control_bar').classList.remove('disabled')\r\n        console.log(\"response: \",response)\r\n        if (!response.ok) {\r\n            throw Error(response.statusText)\r\n        } else {\r\n            return response.json()\r\n        }\r\n    })\r\n    .then(data => {\r\n        console.log(\"data: \", data)\r\n        try {\r\n            addToChatLog('bot', data.message, 0)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n        document.querySelector('#ai_input').focus()\r\n    })\r\n    .catch(error => {\r\n        document.querySelector('#ai_input').classList.add('error')\r\n        document.querySelector('#ai_input').placeholder = errorString\r\n    })\r\n    \r\n}\r\n\r\n/**\r\n * Using the existing messages in the chat history, create a string that can be used to aid completion\r\n * @return {JSONObject} A transcript of the conversation up to this point\r\n */\r\n\r\n// const buildTranscript = () => {\r\n//     let transcript = []\r\n//     document.querySelectorAll('.ai_message').forEach((message, index) => {\r\n//         if (index === document.querySelectorAll('.ai_message').length - 1) {\r\n//             return\r\n//         }\r\n\r\n//         let user = userName\r\n//         if (message.classList.contains('bot')) {\r\n//             user = assistantName\r\n//         }\r\n//         transcript.push({\"user\": user, \"message\": message.innerText})\r\n//     })\r\n//     return transcript\r\n// }"],"names":["questionString","errorString","data","blockId","history","console","log","message","addToChatLog","role","content","window","addEventListener","event","stopImmediatePropagation","document","querySelector","e","which","target","value","createCompletion","input","preventDefault","Modal","create","type","types","SAVE_CANCEL","title","body","then","modal","show","getRoot","on","ModalEvents","save","clearHistory","hide","hidden","destroy","catch","Notification","exception","require","str","get_strings","key","component","results","his","messageContainer","messageElem","createElement","classList","add","className","split","messageText","innerText","innerHTML","append","offsetWidth","style","width","scrollTop","scrollHeight","fetch","M","cfg","wwwroot","method","response","ok","Error","statusText","error","placeholder","remove","blur","JSON","stringify","removeChild","lastElementChild","json","focus"],"mappings":"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"}